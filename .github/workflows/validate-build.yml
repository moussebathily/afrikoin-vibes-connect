name: Validate Build & Docker

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  validate-local-build:
    name: Test Local Build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js 20
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Type check
      run: npx tsc --noEmit
      
    - name: Run linting
      run: npm run lint
      
    - name: Build application
      run: npm run build
      
    - name: Verify build output
      run: |
        echo "üîç Checking build output..."
        ls -la dist/
        test -f dist/index.html || (echo "‚ùå index.html missing" && exit 1)
        test -d dist/assets || (echo "‚ùå assets directory missing" && exit 1)
        echo "‚úÖ Build output looks good"

  validate-docker:
    name: Test Docker Build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Verify Docker files
      run: |
        echo "üîç Checking Docker configuration..."
        test -f Dockerfile || (echo "‚ùå Dockerfile missing" && exit 1)
        test -f .dockerignore || (echo "‚ùå .dockerignore missing" && exit 1)
        echo "‚úÖ Docker files present"
        
    - name: Build Docker image
      run: |
        echo "üê≥ Building Docker image..."
        docker build -t afrikoin-test:latest .
        
    - name: Test Docker container
      run: |
        echo "üß™ Testing Docker container..."
        # D√©marrer le conteneur en arri√®re-plan
        docker run -d --name test-container -p 8080:8080 afrikoin-test:latest
        
        # Attendre que le conteneur d√©marre
        sleep 10
        
        # V√©rifier que le conteneur fonctionne
        if docker ps | grep test-container; then
          echo "‚úÖ Container is running"
        else
          echo "‚ùå Container failed to start"
          docker logs test-container
          exit 1
        fi
        
        # Test health check si disponible
        if curl -f http://localhost:8080/health 2>/dev/null; then
          echo "‚úÖ Health check passed"
        else
          echo "‚ÑπÔ∏è Health check endpoint not responding (may be normal)"
        fi
        
        # Nettoyer
        docker stop test-container
        docker rm test-container
        
    - name: Validate image size
      run: |
        echo "üìè Checking image size..."
        SIZE=$(docker images afrikoin-test:latest --format "table {{.Size}}" | tail -1)
        echo "Image size: $SIZE"
        # Avertir si l'image est tr√®s grande (>500MB)
        if docker images afrikoin-test:latest --format "{{.Size}}" | grep -E "GB|[5-9][0-9][0-9]MB"; then
          echo "‚ö†Ô∏è Image is quite large. Consider optimizing."
        else
          echo "‚úÖ Image size looks reasonable"
        fi