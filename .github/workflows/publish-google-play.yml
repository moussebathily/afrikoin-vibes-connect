name: Publish Android to Google Play

on:
  push:
    branches: [main, master]
    tags: ['v*']
  workflow_dispatch:
    inputs:
      track:
        description: 'Google Play track to publish to'
        type: choice
        required: true
        default: internal
        options: [internal, alpha, beta, production]
      rollout:
        description: 'Staged rollout fraction for production (0-1). Ignored unless production.'
        required: false
        default: '0.1'

jobs:
  quality:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      - run: npm ci
      - run: npm run lint
      - name: Commitlint
        uses: wagoid/commitlint-github-action@v5

  publish:
    name: Build AAB and publish to Google Play
    runs-on: ubuntu-latest
    needs: quality
    environment: production
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          accept-licenses: true
          packages: |
            platform-tools
            platforms;android-35
            build-tools;35.0.0

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
        continue-on-error: true
        with:
          cache-disabled: true

      - name: Make Gradle wrapper executable
        run: chmod +x android/gradlew

      - name: Install dependencies
        run: npm ci

      - name: Build web app
        run: npm run build

      - name: Sync Capacitor Android
        run: npx cap sync android

      - name: Prepare Android signing from secrets
        env:
          ANDROID_KEYSTORE_B64: ${{ secrets.ANDROID_KEYSTORE }}
          ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
        run: |
          if [ -z "$ANDROID_KEYSTORE_B64" ]; then
            echo "Missing secret ANDROID_KEYSTORE (base64-encoded keystore)" >&2
            exit 1
          fi
          echo "$ANDROID_KEYSTORE_B64" | base64 -d > "$RUNNER_TEMP/keystore.jks"
          echo "ANDROID_KEYSTORE=$RUNNER_TEMP/keystore.jks" >> $GITHUB_ENV
          echo "ANDROID_KEYSTORE_PASSWORD=$ANDROID_KEYSTORE_PASSWORD" >> $GITHUB_ENV
          echo "ANDROID_KEY_ALIAS=$ANDROID_KEY_ALIAS" >> $GITHUB_ENV
          echo "ANDROID_KEY_PASSWORD=$ANDROID_KEY_PASSWORD" >> $GITHUB_ENV

      - name: Print resolved signing config
        working-directory: android
        run: ./gradlew :app:printSigningConfig --no-daemon

      - name: List Gradle tasks
        working-directory: android
        run: ./gradlew :app:tasks --all --no-daemon

      - name: Determine Android variant (flavor-aware)
        id: variant
        working-directory: android
        run: |
          if ./gradlew :app:tasks --all | grep -q "bundleProdRelease"; then
            echo "BUNDLE_TASK=:app:bundleProdRelease" >> $GITHUB_ENV
            echo "VARIANT_DIR=prodRelease" >> $GITHUB_ENV
            echo "Using flavored task: bundleProdRelease"
          else
            echo "BUNDLE_TASK=:app:bundleRelease" >> $GITHUB_ENV
            echo "VARIANT_DIR=release" >> $GITHUB_ENV
            echo "Using default task: bundleRelease"
          fi

      - name: Build AAB (release)
        uses: nick-fields/retry@v2
        with:
          max_attempts: 3
          command: ./gradlew :app:clean $BUNDLE_TASK --no-daemon --stacktrace --info | tee "$RUNNER_TEMP/gradle-build.log"
          working-directory: android

      - name: Upload Gradle build log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gradle-build-log-${{ github.run_number }}
          path: ${{ runner.temp }}/gradle-build.log
          if-no-files-found: ignore
          retention-days: 7

      - name: Diagnose build outputs
        if: always()
        run: |
          echo "Listing android/app/build/outputs:"
          ls -R android/app/build/outputs || true
          echo "Finding files up to 6 levels deep:"
          find android/app/build -maxdepth 6 -type f -print || true

      - name: Validate bundle
        run: |
          curl -sL https://github.com/google/bundletool/releases/download/1.16.0/bundletool-all-1.16.0.jar -o bundletool.jar
          java -jar bundletool.jar validate --bundle android/app/build/outputs/bundle/$VARIANT_DIR/app-$VARIANT_DIR.aab

      - name: Upload build artifacts (AAB and mapping)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: android-release-${{ github.run_number }}
          path: |
            android/app/build/outputs/**/*.aab
            android/app/build/outputs/**/mapping.txt
          if-no-files-found: warn
          retention-days: 7

      - name: Prepare Play credentials
        env:
          PLAY_SERVICE_ACCOUNT_JSON: ${{ secrets.PLAY_SERVICE_ACCOUNT_JSON }}
        run: |
          if [ -z "$PLAY_SERVICE_ACCOUNT_JSON" ]; then
            echo "Missing PLAY_SERVICE_ACCOUNT_JSON" >&2
            exit 1
          fi
          echo "$PLAY_SERVICE_ACCOUNT_JSON" > "$RUNNER_TEMP/play-sa.json"
          echo "PLAY_SERVICE_ACCOUNT_JSON_PATH=$RUNNER_TEMP/play-sa.json" >> $GITHUB_ENV

      - name: Prepare release notes
        run: echo "RELEASE_NOTES=$(git log -1 --pretty=%s)" >> $GITHUB_ENV

      - name: Publish to Google Play
        uses: nick-fields/retry@v2
        with:
          max_attempts: 3
          command: >
            ./gradlew publishReleaseBundle -Pplay.serviceAccountJson=$PLAY_SERVICE_ACCOUNT_JSON_PATH -Pplay.track=${{ inputs.track || 'production' }} -Pplay.releaseStatus=inProgress -Pplay.releaseFraction=${{ inputs.rollout || '0.1' }} -Pplay.releaseNotes=en-US:"$RELEASE_NOTES" --no-daemon --stacktrace --info
          working-directory: android
