name: Publish Android to Google Play

permissions:
  contents: read
  actions: write

on:
  push:
    branches: [main, master]
    tags: ['v*']
  workflow_dispatch:
    inputs:
      track:
        description: 'Google Play track to publish to'
        type: choice
        required: true
        default: internal
        options: [internal, alpha, beta, production]
      rollout:
        description: 'Staged rollout fraction for production (0-1). Ignored unless production.'
        required: false
        default: '0.2'

jobs:
  quality:
    name: Quality checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Type check
        run: npx tsc --noEmit

      - name: Lint check
        run: npx eslint .

      - name: Build web app
        run: npm run build

  build-and-publish:
    name: Build AAB and publish to Google Play
    runs-on: ubuntu-latest
    needs: quality
    environment: production
    env:
      PACKAGE_NAME: app.lovable.afrikoin
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          accept-android-sdk-licenses: true
          log-accepted-android-sdk-licenses: true
          packages: |
            platform-tools
            platforms;android-35
            build-tools;35.0.0

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
        continue-on-error: true
        with:
          cache-disabled: true

      - name: Make Gradle wrapper executable
        run: chmod +x android/gradlew

      - name: Install dependencies
        run: npm ci

      - name: Build web app
        run: npm run build

      - name: Sync Capacitor Android
        run: npx cap sync android

      - name: Prepare Android signing from secrets
        env:
          ANDROID_KEYSTORE_B64: ${{ secrets.ANDROID_KEYSTORE }}
          ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
        run: |
          if [ -z "$ANDROID_KEYSTORE_B64" ]; then
            echo "Missing secret ANDROID_KEYSTORE (base64-encoded keystore)" >&2
            exit 1
          fi
          echo "$ANDROID_KEYSTORE_B64" | base64 -d > "$RUNNER_TEMP/keystore.jks"
          echo "ANDROID_KEYSTORE=$RUNNER_TEMP/keystore.jks" >> $GITHUB_ENV
          echo "ANDROID_KEYSTORE_PASSWORD=$ANDROID_KEYSTORE_PASSWORD" >> $GITHUB_ENV
          echo "ANDROID_KEY_ALIAS=$ANDROID_KEY_ALIAS" >> $GITHUB_ENV
          echo "ANDROID_KEY_PASSWORD=$ANDROID_KEY_PASSWORD" >> $GITHUB_ENV

      - name: Print resolved signing config
        working-directory: android
        run: ./gradlew :app:printSigningConfig --no-daemon

      - name: List Gradle tasks
        working-directory: android
        run: ./gradlew :app:tasks --all --no-daemon

      - name: Determine Android variant (flavor-aware)
        id: variant
        working-directory: android
        run: |
          if ./gradlew :app:tasks --all | grep -q "bundleProdRelease"; then
            echo "BUNDLE_TASK=:app:bundleProdRelease" >> $GITHUB_ENV
            echo "VARIANT_DIR=prodRelease" >> $GITHUB_ENV
            echo "Using flavored task: bundleProdRelease"
          else
            echo "BUNDLE_TASK=:app:bundleRelease" >> $GITHUB_ENV
            echo "VARIANT_DIR=release" >> $GITHUB_ENV
            echo "Using default task: bundleRelease"
          fi

      - name: Build AAB (release) with retry
        working-directory: android
        run: |
          for i in {1..3}; do
            echo "Build attempt $i/3"
            if ./gradlew :app:clean $BUNDLE_TASK --no-daemon --stacktrace --info | tee "$RUNNER_TEMP/gradle-build.log"; then
              break
            fi
            if [ $i -eq 3 ]; then
              echo "❌ Build failed after 3 attempts"
              exit 1
            fi
            echo "⚠️ Build failed, retrying in 10s..."
            sleep 10
          done

      - name: Upload Gradle build log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gradle-build-log-${{ github.run_number }}
          path: ${{ runner.temp }}/gradle-build.log
          if-no-files-found: ignore
          retention-days: 7

      - name: Diagnose build outputs
        if: always()
        run: |
          echo "Listing android/app/build/outputs:"
          ls -R android/app/build/outputs || true
          echo "Finding files up to 6 levels deep:"
          find android/app/build -maxdepth 6 -type f -print || true

      - name: Upload build artifacts (AAB and mapping)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: android-release-${{ github.run_number }}
          path: |
            android/app/build/outputs/**/*.aab
            android/app/build/outputs/**/mapping.txt
          if-no-files-found: warn
          retention-days: 7

      - name: Determine track and rollout
        id: track
        run: |
          ROLLOUT_INPUT="${{ inputs.rollout }}"
          validate_rollout() {
            local r="$1"
            [[ "$r" =~ ^(0(\.\d+)?|1(\.0+)?)$ ]]
          }
          if [[ "${GITHUB_REF}" == refs/tags/v* ]]; then
            # Tag build → Production staged rollout (default 0.2 if not provided)
            rf="$ROLLOUT_INPUT"
            if [[ -z "$rf" ]]; then rf="0.2"; fi
            if ! validate_rollout "$rf"; then
              echo "Invalid rollout '$rf' for tag build; defaulting to 0.2" >&2
              rf="0.2"
            fi
            echo "track=production" >> $GITHUB_OUTPUT
            echo "status=inProgress" >> $GITHUB_OUTPUT
            echo "userFraction=$rf" >> $GITHUB_OUTPUT
          elif [[ -n "${{ inputs.track }}" ]]; then
            sel="${{ inputs.track }}"
            if [[ "$sel" == "production" ]]; then
              rf="$ROLLOUT_INPUT"
              if [[ -n "$rf" ]]; then
                if validate_rollout "$rf"; then
                  echo "track=production" >> $GITHUB_OUTPUT
                  echo "status=inProgress" >> $GITHUB_OUTPUT
                  echo "userFraction=$rf" >> $GITHUB_OUTPUT
                else
                  echo "Provided rollout '$rf' is invalid. Must be 0..1 (e.g., 0.05, 0.1, 0.2, 0.5)." >&2
                  exit 1
                fi
              else
                echo "track=production" >> $GITHUB_OUTPUT
                echo "status=completed" >> $GITHUB_OUTPUT
                echo "userFraction=" >> $GITHUB_OUTPUT
              fi
            else
              echo "track=$sel" >> $GITHUB_OUTPUT
              echo "status=completed" >> $GITHUB_OUTPUT
              echo "userFraction=" >> $GITHUB_OUTPUT
            fi
          else
            echo "track=internal" >> $GITHUB_OUTPUT
            echo "status=completed" >> $GITHUB_OUTPUT
            echo "userFraction=" >> $GITHUB_OUTPUT
          fi

      - name: Validate AAB before upload
        working-directory: android
        run: |
          AAB_FILE=$(find app/build/outputs -name "*.aab" | head -1)
          if [ ! -f "$AAB_FILE" ]; then
            echo "❌ AAB file not found"
            exit 1
          fi
          echo "✅ AAB found: $AAB_FILE"
          # Basic AAB validation
          if [ $(stat -c%s "$AAB_FILE") -lt 1000000 ]; then
            echo "⚠️ AAB seems too small (< 1MB), please verify"
          fi

      - name: Upload to Google Play
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJsonPlainText: ${{ secrets.PLAY_SERVICE_ACCOUNT_JSON }}
          packageName: ${{ env.PACKAGE_NAME }}
          releaseFiles: android/app/build/outputs/**/*.aab
          mappingFile: android/app/build/outputs/**/mapping.txt
          track: ${{ steps.track.outputs.track }}
          status: ${{ steps.track.outputs.status }}
          userFraction: ${{ steps.track.outputs.userFraction }}
          inAppUpdatePriority: 3
          releaseNotes: "Automatic release from commit ${{ github.sha }}"
