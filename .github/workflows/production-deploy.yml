name: Production Deploy

permissions:
  contents: write
  actions: write
  issues: write
  pull-requests: write

on:
  push:
    tags: ['v*']
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy (e.g., v1.2.2)'
        required: true
        default: 'v1.2.2'

jobs:
  build-android:
    runs-on: ubuntu-latest
    name: Build Android AAB

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup SSH (optional)
        if: ${{ vars.HAS_SSH_KEY == 'true' || github.repository_owner == 'afrikoin-dev' }}
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}

      - name: Add GitHub to known_hosts
        if: ${{ vars.HAS_SSH_KEY == 'true' || github.repository_owner == 'afrikoin-dev' }}
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -t rsa,ecdsa,ed25519 github.com >> ~/.ssh/known_hosts

      - name: Make Gradle wrapper executable
        run: chmod +x android/gradlew

      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v2

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup Java JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          accept-android-sdk-licenses: true
          log-accepted-android-sdk-licenses: true
          packages: |
            platform-tools
            platforms;android-35
            build-tools;35.0.0

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Install dependencies
        run: npm ci --legacy-peer-deps --ignore-optional

      - name: Build Web app
        run: |
          set -euo pipefail
          echo "üèóÔ∏è Building web app for Android deployment‚Ä¶"
          npm run build || {
            echo "‚ùå Build failed, attempting with dev mode"
            npm run build:dev || {
              echo "‚ùå Both builds failed, checking environment"
              echo "Node version: $(node --version)"
              echo "NPM version: $(npm --version)"
              npm ls typescript || echo "TypeScript not found"
              exit 1
            }
          }
          
          # Verify build output
          if [ ! -f "dist/index.html" ]; then
            echo "‚ùå Build failed: dist/index.html not found"
            ls -la dist/ 2>/dev/null || echo "dist/ directory missing"
            exit 1
          fi
          
          echo "‚úÖ Web build completed successfully"

      - name: Add Android platform (Capacitor)
        run: |
          if [ ! -d android/app ]; then
            npx cap add android
          else
            echo "Android platform already present"
          fi

      - name: Capacitor sync
        run: npx cap sync android

      - name: Configure Android signing
        run: |
          if [ -n "${{ secrets.ANDROID_KEYSTORE }}" ]; then
            echo "‚úÖ Android signing configured"
            mkdir -p android/app
            echo "${{ secrets.ANDROID_KEYSTORE }}" | base64 --decode > android/app/release.keystore
            {
              echo "MYAPP_UPLOAD_STORE_FILE=release.keystore"
              echo "MYAPP_UPLOAD_STORE_PASSWORD=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}"
              echo "MYAPP_UPLOAD_KEY_ALIAS=${{ secrets.ANDROID_KEY_ALIAS }}"
              echo "MYAPP_UPLOAD_KEY_PASSWORD=${{ secrets.ANDROID_KEY_PASSWORD }}"
            } >> android/gradle.properties
          else
            echo "‚ö†Ô∏è Secret ANDROID_KEYSTORE not set. Release will not be signed."
          fi

      - name: Print keystore SHA-1 (verify)
        if: ${{ vars.HAS_KEYSTORE == 'true' || github.repository_owner == 'afrikoin-dev' }}
        run: |
          set -euo pipefail
          echo "üîé Checking upload key SHA-1‚Ä¶"
          RAW=$(keytool -list -v -alias "${{ secrets.ANDROID_KEY_ALIAS }}" \
                -keystore android/app/release.keystore \
                -storepass "${{ secrets.ANDROID_KEYSTORE_PASSWORD }}" \
                -keypass "${{ secrets.ANDROID_KEY_PASSWORD }}" || true)
          echo "$RAW"
          FP=$(printf "%s" "$RAW" | sed -n -e 's/.*SHA-1:\s*\(.*\)/\1/p' -e 's/.*SHA1:\s*\(.*\)/\1/p' | head -n1 | tr '[:lower:]' '[:upper:]' | tr -d ' \r')
          if [ -z "$FP" ]; then
            echo "‚ùå Could not extract SHA-1. Check alias/passwords."
            exit 1
          fi
          echo "SHA-1: $FP"
          EXP="${{ secrets.EXPECTED_UPLOAD_SHA1 }}"
          if [ -z "$EXP" ]; then EXP="${{ secrets.PLAY_UPLOAD_SHA1 }}"; fi
          if [ -n "$EXP" ]; then
            EXP_UP=$(echo "$EXP" | tr '[:lower:]' '[:upper:]' | tr -d ' \r:')
            echo "üéØ Expected: $EXP_UP"
            if [ "$FP" != "$EXP_UP" ]; then
              echo "‚ùå Keystore SHA-1 does not match expected upload key."
              exit 1
            else
              echo "‚úÖ Keystore SHA-1 matches expected upload key."
            fi
          else
            echo "‚ÑπÔ∏è No EXPECTED_UPLOAD_SHA1 provided. Skipping strict check."
          fi

      - name: Build Android AAB (Release)
        working-directory: android
        run: |
          echo "üî® Building AAB release‚Ä¶"
          ./gradlew bundleRelease --stacktrace --info

      - name: Upload AAB artifact
        uses: actions/upload-artifact@v4
        with:
          name: afrikoin-${{ github.ref_name || inputs.version }}.aab
          path: android/app/build/outputs/bundle/release/app-release.aab

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            android/app/build/outputs/bundle/release/app-release.aab
          name: AfriKoin ${{ github.ref_name || inputs.version }}
          body: |
            ## AfriKoin ${{ github.ref_name || inputs.version }}

            ### üì± Android AAB
            - Version: ${{ github.ref_name || inputs.version }}
            - Build: ${{ github.run_number }}
            - Signed and ready for Google Play Store

            ### üåê Web Deployment
            - Live at: https://www.afrikoin.online

            ### üöÄ Release notes
            - Android AAB ready for production
            - Web app updated with the latest features
            - SEO optimized with sitemap
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy-web:
    runs-on: ubuntu-latest
    name: Deploy Web to afrikoin.online
    needs: [build-android]
    if: always() # Continue even if Android build fails

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup SSH (optional)
        if: ${{ vars.HAS_SSH_KEY == 'true' || github.repository_owner == 'afrikoin-dev' }}
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}

      - name: Add GitHub to known_hosts
        if: ${{ vars.HAS_SSH_KEY == 'true' || github.repository_owner == 'afrikoin-dev' }}
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -t rsa,ecdsa,ed25519 github.com >> ~/.ssh/known_hosts

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps --ignore-optional

      - name: Build Web app
        run: |
          set -euo pipefail
          echo "üèóÔ∏è Building web app for production deployment‚Ä¶"
          npm run build || {
            echo "‚ùå Production build failed, trying alternative approach"
            npm run build:dev || {
              echo "‚ùå Development build also failed, debugging"
              echo "Node version: $(node --version)"
              echo "NPM version: $(npm --version)"
              echo "Environment: NODE_ENV=${NODE_ENV:-not set}"
              npm ls vite typescript || echo "Missing build dependencies"
              exit 1
            }
          }
          
          # Verify build output
          if [ ! -f "dist/index.html" ]; then
            echo "‚ùå Build failed: dist/index.html not found"
            ls -la dist/ 2>/dev/null || echo "dist/ directory missing"
            exit 1
          fi
          
          echo "‚úÖ Production build completed successfully"

      - name: Deploy to Vercel (Production)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          vercel-args: '--prod'
          vercel-org-id: ${{ secrets.ORG_ID }}
          vercel-project-id: ${{ secrets.PROJECT_ID }}
          working-directory: ./

      - name: Ping Google with sitemap
        run: |
          echo "üìç Submitting sitemap to Google"
          curl -X POST "https://www.google.com/ping?sitemap=https://www.afrikoin.online/sitemap.xml"

      - name: Notify success
        run: |
          echo "üåê AfriKoin deployed!"
          echo "üîó Live: https://www.afrikoin.online"
          echo "üó∫Ô∏è Sitemap: https://www.afrikoin.online/sitemap.xml"
          echo "üì± Mobile AAB ready for Google Play Store"

  validate-deploy:
    runs-on: ubuntu-latest
    name: Validate Production Deployment
    needs: [build-android, deploy-web]
    if: always() # Run validation regardless of previous job results

    steps:
      - name: Check website availability
        run: |
          set -e
          code=$(curl -s -o /dev/null -w "%{http_code}" https://www.afrikoin.online)
          if [ "$code" -eq 200 ]; then
            echo "‚úÖ Website is up (HTTP $code)"
          else
            echo "‚ùå Website check failed (HTTP $code)"
            exit 1
          fi

      - name: Validate sitemap
        run: |
          set -e
          code=$(curl -s -o /dev/null -w "%{http_code}" https://www.afrikoin.online/sitemap.xml)
          if [ "$code" -eq 200 ]; then
            echo "‚úÖ Sitemap is accessible (HTTP $code)"
          else
            echo "‚ùå Sitemap check failed (HTTP $code)"
            exit 1
          fi

      - name: Deployment summary
        run: |
          echo "üéâ Production deployment completed successfully!"
          echo "üìä Summary:"
          echo " - Android AAB: built and attached to the release"
          echo " - Web: deployed on afrikoin.online"
          echo " - SEO: sitemap submitted to Google"
