name: Publish Android to Google Play

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      release_notes:
        description: "Notes de version (facultatif)"
        required: false
        default: ""
      rollout_fraction:
        description: "Déploiement progressif 0–1 (laisser vide = 100%)"
        required: false
        default: ""

jobs:
  android-play:
    runs-on: ubuntu-latest
    name: Build AAB & Publish

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      # Service de cache GitHub parfois KO → on le coupe
      - name: Setup Gradle (no cache)
        uses: gradle/actions/setup-gradle@v3
        with:
          cache-disabled: true
          add-job-summary: true

      - name: Install Android SDK (API 34 stable)
        uses: android-actions/setup-android@v3
        with:
          packages: |
            platform-tools
            platforms;android-34
            build-tools;34.0.0

      - name: Install JS deps (with fallback)
        shell: bash
        run: |
          set -e
          if ! npm ci --legacy-peer-deps --ignore-optional; then
            echo "⚠️ npm ci failed, trying npm install…"
            rm -rf node_modules package-lock.json || true
            npm install --legacy-peer-deps
          fi
          npm install @capacitor/core @capacitor/android --save

      - name: Ensure Android platform & sync
        shell: bash
        run: |
          if [ ! -d "android/app" ]; then
            npx cap add android || true
          fi
          npx cap sync android

      - name: Detect gradlew path
        id: gradle
        shell: bash
        run: |
          if [ -f "./gradlew" ]; then echo "dir=." >> $GITHUB_OUTPUT
          elif [ -f "./android/gradlew" ]; then echo "dir=android" >> $GITHUB_OUTPUT
          else echo "❌ gradlew not found"; exit 1; fi

      - name: Decode Android keystore
        if: ${{ secrets.ANDROID_KEYSTORE_BASE64 != '' }}
        shell: bash
        run: |
          echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 -d > $HOME/release.keystore

      - name: Configure signing (Gradle)
        shell: bash
        run: |
          mkdir -p $HOME/.gradle
          {
            echo "RELEASE_STORE_FILE=$HOME/release.keystore"
            echo "RELEASE_STORE_PASSWORD=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}"
            echo "RELEASE_KEY_ALIAS=${{ secrets.ANDROID_KEY_ALIAS }}"
            echo "RELEASE_KEY_PASSWORD=${{ secrets.ANDROID_KEY_PASSWORD }}"
          } >> $HOME/.gradle/gradle.properties

      - name: Play API credentials
        shell: bash
        run: |
          echo "${{ secrets.PLAY_SERVICE_ACCOUNT_JSON }}" > $HOME/play-account.json

      - name: Build AAB (release)
        shell: bash
        run: |
          cd "${{ steps.gradle.outputs.dir }}"
          ./gradlew bundleRelease --stacktrace --info

      - name: Locate AAB & mapping
        id: locate
        shell: bash
        run: |
          cd "${{ steps.gradle.outputs.dir }}"
          AAB=$(find . -type f -path "*/outputs/bundle/*/*.aab" | head -n1)
          MAP=$(find . -type f -path "*/outputs/mapping/*/mapping.txt" | head -n1 || true)
          if [ -z "$AAB" ]; then
            echo "❌ No AAB found"; find . -maxdepth 6 -type d -name outputs -print; exit 1
          fi
          echo "aab=$AAB" >> $GITHUB_OUTPUT
          echo "map=$MAP" >> $GITHUB_OUTPUT
          echo "Found: $AAB"; [ -n "$MAP" ] && echo "Mapping: $MAP"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android-release-build
          path: |
            ${{ steps.locate.outputs.aab }}
            ${{ steps.locate.outputs.map }}
          if-no-files-found: warn

      - name: Publish to Google Play (production)
        env:
          NOTES: ${{ github.event.inputs.release_notes }}
          FRACTION: ${{ github.event.inputs.rollout_fraction }}
        shell: bash
        run: |
          cd "${{ steps.gradle.outputs.dir }}"
          ARGS=(
            "-Pplay.serviceAccountCredentials=$HOME/play-account.json"
            "-Pplay.track=production"
          )
          if [ -n "$FRACTION" ]; then
            echo "🌀 Rollout progressif: $FRACTION"
            ARGS+=("-Pplay.releaseStatus=inProgress" "-Pplay.releaseFraction=$FRACTION")
          else
            echo "🚀 Rollout 100%"
            ARGS+=("-Pplay.releaseStatus=completed")
          fi
          if [ -n "$NOTES" ]; then
            echo "$NOTES" > whatsnew.txt
            ARGS+=("-Pplay.releaseNotes=en-US:whatsnew.txt")
          fi
          ./gradlew publishReleaseBundle "${ARGS[@]}" --stacktrace --info
                      - nom : Cache
  utilisations : actions/cache@v4.2.4
  avec:
    # Une liste de fichiers, de répertoires et de modèles génériques à mettre en cache et à restaurer
    chemin:
    # Une clé explicite pour restaurer et sauvegarder le cache
    clé:
    # Une chaîne multiligne ordonnée listant les clés correspondant au préfixe, utilisées pour restaurer le cache obsolète si aucune correspondance n'a été trouvée pour la clé. Notez que `cache-hit` renvoie false dans ce cas.
    restore-keys : # facultatif
    # La taille du bloc utilisé pour diviser les fichiers volumineux lors du téléchargement, en octets
    upload-chunk-size : # facultatif
    # Un booléen facultatif lorsqu'il est activé, permet aux exécuteurs Windows d'enregistrer ou de restaurer des caches qui peuvent être restaurés ou enregistrés respectivement sur d'autres plates-formes
    enableCrossOsArchive : # facultatif, la valeur par défaut est false
    # Échec du flux de travail si l'entrée du cache n'est pas trouvée
    fail-on-cache-miss : # facultatif, la valeur par défaut est false
    # Vérifier si une entrée de cache existe pour les entrées données (clé, clés de restauration) sans télécharger le cache
    recherche uniquement : # facultatif, la valeur par défaut est false
    # Exécutez l'étape de publication pour enregistrer le cache même si une autre étape avant échoue
    save-always : # facultatif, la valeur par défaut est false
          
