# cloudbuild.yaml ‚Äî Build Docker, push vers Artifact Registry, puis d√©ploie sur Cloud Run

substitutions:
  _AR_HOSTNAME: 'europe-west1-docker.pkg.dev'
  _AR_PROJECT_ID: 'afrikoin-deploy'
  _AR_REPOSITORY: 'cloud-run-source-deploy'
  _DEPLOY_REGION: 'europe-west1'
  _PLATFORM: 'managed'
  _SERVICE_NAME: 'afrikoin-vibes-connect'

# Image tagg√©e par SHA du commit (valable pour rollback facile)
images:
  - '$_AR_HOSTNAME/$_AR_PROJECT_ID/$_AR_REPOSITORY/$_SERVICE_NAME:${COMMIT_SHA}'

options:
  logging: CLOUD_LOGGING_ONLY
  machineType: E2_HIGHCPU_8   # Ajuste si besoin
  substitution_option: 'ALLOW_LOOSE'

steps:
  # 0) Diagnostic: v√©rifier les fichiers requis
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:alpine'
    entrypoint: bash
    args:
      - -lc
      - |
        echo "== V√©rification des fichiers ==" 
        echo "PWD: $(pwd)"
        echo "Dockerfile pr√©sent: $(test -f Dockerfile && echo 'OUI' || echo 'NON')"
        echo ".dockerignore pr√©sent: $(test -f .dockerignore && echo 'OUI' || echo 'NON')"
        echo "package.json pr√©sent: $(test -f package.json && echo 'OUI' || echo 'NON')"
        echo "== Structure du projet =="
        find . -maxdepth 2 -type f | head -20

  # 1) Build Docker avec validation
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '-t'
      - '$_AR_HOSTNAME/$_AR_PROJECT_ID/$_AR_REPOSITORY/$_SERVICE_NAME:${COMMIT_SHA}'
      - '--no-cache'
      - '.'

  # 2) Test de l'image Docker
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'run'
      - '--rm'
      - '--detach'
      - '--publish'
      - '8080:8080'
      - '--name'
      - 'test-container'
      - '$_AR_HOSTNAME/$_AR_PROJECT_ID/$_AR_REPOSITORY/$_SERVICE_NAME:${COMMIT_SHA}'
  
  # 3) V√©rification health check
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:alpine'
    entrypoint: 'bash'
    args:
      - '-lc'
      - |
        sleep 10
        docker logs test-container || true
        docker stop test-container || true

  # 4) Push vers Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - '$_AR_HOSTNAME/$_AR_PROJECT_ID/$_AR_REPOSITORY/$_SERVICE_NAME:${COMMIT_SHA}'

  # 5) D√©ploiement Cloud Run avec configuration optimis√©e
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:alpine'
    entrypoint: 'bash'
    args:
      - '-lc'
      - |
        gcloud run deploy "$_SERVICE_NAME" \
          --image "$_AR_HOSTNAME/$_AR_PROJECT_ID/$_AR_REPOSITORY/$_SERVICE_NAME:${COMMIT_SHA}" \
          --region "$_DEPLOY_REGION" \
          --platform "$_PLATFORM" \
          --allow-unauthenticated \
          --port 8080 \
          --memory 512Mi \
          --cpu 1 \
          --max-instances 10 \
          --min-instances 0 \
          --set-env-vars NODE_ENV=production \
          --timeout 300

  # 6) V√©rification du d√©ploiement
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:alpine'
    entrypoint: 'bash'
    args:
      - '-lc'
      - |
        SERVICE_URL=$(gcloud run services describe $_SERVICE_NAME --region $_DEPLOY_REGION --format 'value(status.url)')
        echo "üåê Service d√©ploy√© √†: $SERVICE_URL"
        echo "üîç Test de sant√©..."
        curl -f "$SERVICE_URL/health" || echo "‚ö†Ô∏è Health check √©chou√©"
        echo "‚úÖ D√©ploiement termin√©!"
